using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events; // UniTask namespace
using Sirenix.OdinInspector;
using UnityEngine.Serialization;

[Serializable]
public class NamedUnityEvent
{
    [Tooltip("The name of the event."),Title("$eventName")] 
    public string eventName;

    [Tooltip("The delay in seconds before invoking the event."),Space] 
    public float waitBeforeInvoke = 0f;

    [Tooltip("The Unity event to invoke."),Space(10)] 
    public UnityEvent unityEvent;
}


[Serializable]
public class NamedUnityEventSequence
{
    [Title("$sequenceName")]
    public string sequenceName;

    [Tooltip("The array of named Unity events in the sequence."),Space(10),
    InfoBox("The order of the events in the array will be the order of the events in the sequence with the consideration of 'WaitBeforeInvoke'")] 
    public NamedUnityEvent[] namedUnityEventSequence;
}

/// <summary>
/// author: Shengyang Billiton Peng
/// 
/// This can be used as the library of single UnityEvents and UnityEventSequences;
/// DO NOT CHANGE THE SCRIPT! COPY THE CODE TO YOUR FOLDER AND CHANGE THE CLASS NAME IF YOU WANT TO MODIFY IT.
/// Parts of the summary are generated by AI.
/// </summary>
public class UnityEventLibrary : MonoBehaviour
{
   // [TitleGroup("UnityEventLibrary",boldTitle: true, horizontalLine: true, indent: false),Tooltip("This can be used as the library of single UnityEvents and UnityEventSequences;")]
    
    [PropertySpace(SpaceAfter = 30),TitleGroup("Single Unity Events", alignment: TitleAlignments.Centered, horizontalLine: true, boldTitle: true, indent: false),Searchable,
     InfoBox(
         "Create a list of Unity Events to store the events you want to invoke.Then use 'TriggerEventByName' to invoke them.")]
    public List<NamedUnityEvent> namedUnityEvents = new();

    [TitleGroup("Event Sequences", alignment: TitleAlignments.Centered, horizontalLine: true, boldTitle: true, indent: false),Space(20),
     InfoBox(
         "Create a list of Unity Event Sequences to store the event sequences you want to invoke. Then use 'TriggerSequenceByName' to invoke them. ")]
    [InfoBox("N.B.: The events in one sequence is not invoked in parallel, but in sequence.",InfoMessageType.Warning),Searchable]
    public List<NamedUnityEventSequence> namedUnityEventSequences = new();

    /// <summary>
    /// Checks if an event with the given name exists in the library and returns it.
    /// </summary>
    /// <param name="eventName">The name of the event to check.</param>
    /// <returns>The named Unity event if found; otherwise, null.</returns>
    private NamedUnityEvent TriggerEventByNameChecker(string eventName)
    {
        foreach (var namedEvent in namedUnityEvents)
        {
            if (namedEvent.eventName == eventName)
            {
                return namedEvent;
            }
        }

        Debug.LogWarning($"Event with name {eventName} not found.");
        return null;
    }


    /// <summary>
    /// Triggers an event in the library by name.
    /// </summary>
    private static IEnumerator TriggerEvent(NamedUnityEvent @event)
    {
        yield return new WaitForSeconds(@event.waitBeforeInvoke);
        @event.unityEvent.Invoke();
    }

    /// <summary>
    /// Triggers an event in the library by name.
    /// </summary>
    /// <param name="eventName">The name of the event to trigger.</param>
    public void TriggerEventByName(string eventName)
    {
        var @event = TriggerEventByNameChecker(eventName);

        if (@event != null)
        {
            StartCoroutine(TriggerEvent(@event));
        }
    }

    #region Sequence Unity Events

    /// <summary>
    /// Checks if a sequence with the given name exists in the library and returns it.
    /// </summary>
    /// <param name="eventName">The name of the sequence to check.</param>
    /// <returns>The named Unity event sequence if found; otherwise, null.</returns>
    private NamedUnityEventSequence TriggerSequenceByNameChecker(string eventName)
    {
        foreach (var namedEventSequence in namedUnityEventSequences)
        {
            if (namedEventSequence.sequenceName == eventName)
            {
                return namedEventSequence;
            }
        }

        Debug.LogWarning($"Sequence with name {eventName} not found.");
        return null;
    }

    /// <summary>
    /// Triggers a sequence of events in the library by name.
    /// </summary>
    /// <param name="eventName">The name of the sequence to trigger.</param>
    public void TriggerSequenceByName(string eventName)
    {
        var eventSequence = TriggerSequenceByNameChecker(eventName);

        if (eventSequence == null) return;

        StartCoroutine(TriggerEventSequence(eventSequence));
    }

    /// <summary>
    /// Coroutine that triggers a sequence of named Unity events.
    /// </summary>
    /// <param name="sequence">The named Unity event sequence to trigger.</param>
    /// <returns>IEnumerator used for coroutine.</returns>
    private IEnumerator TriggerEventSequence(NamedUnityEventSequence sequence)
    {
        foreach (var namedEvent in sequence.namedUnityEventSequence)
        {
            yield return new WaitForSeconds(namedEvent.waitBeforeInvoke);
            namedEvent.unityEvent.Invoke();
        }
    }

    #endregion
}